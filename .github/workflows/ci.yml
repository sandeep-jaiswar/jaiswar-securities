name: Bazel CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  bazel:
    name: Bazel Build & Test
    runs-on: ubuntu-latest
    env:
      BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure Cache Path Exists
        run: |
          mkdir -p ~/.cache/bazel

      - name: Setup Bazelisk (Bazel version manager)
        uses: bazelbuild/setup-bazelisk@v1

      - name: Get Bazel Output Base Path
        id: bazel-path
        run: |
          echo "path=$(bazel info output_base)" >> "$GITHUB_OUTPUT"

      - name: Restore Bazel Cache
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ${{ steps.bazel-path.outputs.path }}
          key: bazel-${{ runner.os }}-${{ hashFiles('WORKSPACE', '**/BUILD', '**/*.bzl') }}
          restore-keys: |
            bazel-${{ runner.os }}-
      - name: Debug Cache Key and Path
        run: |
          echo "Cache path: ${{ steps.bazel-path.outputs.path }}"
          echo "Cache key: bazel-${{ runner.os }}-${{ hashFiles('WORKSPACE', '**/BUILD', '**/*.bzl') }}"

      - name: Inject BuildBuddy Remote Cache Key (if set)
        if: env.BUILDBUDDY_API_KEY != ''
        run: echo "build --remote_header=x-buildbuddy-api-key=${BUILDBUDDY_API_KEY}" >> .bazelrc

      - name: Determine changed targets
        id: changes
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | sed 's|^|//|' | paste -sd ' ')
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files."
            echo "CHANGED=" >> $GITHUB_ENV
            exit 0
          fi

          echo "Changed files: $CHANGED_FILES"
          CHANGED_TARGETS=$(bazel query "kind('.*', rdeps(//..., set($CHANGED_FILES)))" || echo "")
          echo "CHANGED=$CHANGED_TARGETS" >> $GITHUB_ENV

      - name: Build Changed Targets
        if: env.CHANGED != ''
        run: |
          echo "Building changed targets..."
          bazel build $CHANGED

      - name: Test Changed Targets
        if: env.CHANGED != ''
        run: |
          echo "Testing changed targets..."
          bazel test $CHANGED --test_output=errors

      - name: Upload Test Logs on Failure
        if: failure()
        run: |
          if [ -d bazel-testlogs ]; then
            echo "Dumping failed test logs:"
            find bazel-testlogs -name "test.log" -exec echo "::group::{}" \; -exec cat {} \; -exec echo "::endgroup::" \;
          else
            echo "No test logs to upload."
          fi
