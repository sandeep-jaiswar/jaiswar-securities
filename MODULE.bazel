module(
    name = "jaiswarsecurities",
    version = "0.1.0",
)

# JS/TS/Next.js/React
bazel_dep(name = "rules_nodejs", version = "6.3.5")
bazel_dep(name = "aspect_rules_js", version = "2.3.7")
bazel_dep(name = "aspect_rules_ts", version = "3.5.3")

# Java (Spring Boot, gRPC, etc.)
bazel_dep(name = "rules_java", version = "8.11.0")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_proto", version = "7.1.0")

# Python
bazel_dep(name = "rules_python", version = "1.4.0-rc4")

# Tooling
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Grpc with rules_proto
bazel_dep(name = "rules_proto_grpc", version = "5.0.1")

# Utility Rules
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "platforms", version = "0.0.11")

# Testing and license
bazel_dep(name = "rules_testing", version = "0.8.0")
bazel_dep(name = "rules_license", version = "1.0.0")

# Rust support
bazel_dep(name = "rules_rust", version = "0.61.0")
# Removed: bazel_dep(name = "cargo_bazel", version = "0.24.0")

# C++ support
bazel_dep(name = "rules_cc", version = "0.1.1")

# Go support
bazel_dep(name = "rules_go", version = "0.54.0")

# --- Extensions (must be declared separately) ---

# JVM/Maven dependencies
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "org.springframework.boot:spring-boot-starter-web:3.1.5",
        "org.springframework.boot:spring-boot-starter-security:3.1.5",
        "org.springframework.boot:spring-boot-starter-validation:3.1.5",
        "io.jsonwebtoken:jjwt-api:0.11.5",
        "io.jsonwebtoken:jjwt-impl:0.11.5",
        "io.jsonwebtoken:jjwt-jackson:0.11.5",
    ],
    repositories = ["https://repo1.maven.org/maven2"],
)
use_repo(maven, "maven")

# Java toolchain setup (remote JDK)
java_ext = use_extension("@rules_java//java:extensions.bzl", "java") # Renamed to java_ext
java_ext.toolchain(version = "17") 
use_repo(java_ext, "remote_java_tools", "remotejdk_17") # remotejdk_17 is conventional name


# Go SDK and toolchains
go_sdk_ext = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk_ext.download(
    name = "go_sdk", # Explicitly name the repository generated by download
    version = "1.21.5",
)
use_repo(go_sdk_ext, "go_sdk") # Import the repository named "go_sdk"

# Rust toolchain
rust_ext = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust_ext.toolchain(
    name = "rust_toolchains", # Explicitly name the repository
    edition = "2021",
    version = "1.70.0",
)
use_repo(rust_ext, "rust_toolchains")

# Node.js toolchain
nodejs_ext = use_extension("@rules_nodejs//nodejs:extensions.bzl", "nodejs")
nodejs_ext.toolchain(
    name = "nodejs_toolchains", # Explicitly name the repository
    node_version = "20.10.0",
)
use_repo(nodejs_ext, "nodejs_toolchains")

# Rust Crates integration using rules_rust extension
# Renamed 'crates' to 'ares_crates' to avoid potential conflicts if other Cargo projects exist
# Using the extension from rules_rust directly
ares_crates = use_extension("@rules_rust//rust:extensions.bzl", "crates") 
ares_crates.from_cargo(
    name = "ares_crates", # Repository name for these crates
    cargo_lockfile = "//apps/ares-trade:Cargo.lock", # Path to the lock file
    manifest = "//apps/ares-trade:Cargo.toml",       # Path to the manifest file (added)
)
use_repo(ares_crates, "ares_crates") # Make the repository available

# If you use pnpm, yarn, or npm for package management with rules_js/rules_ts:
# js_common = use_extension("@aspect_rules_js//js:extensions.bzl", "js_common")
# js_common.npm_translate_lock(
#     name = "npm", # Name this repository, e.g., "npm" for npm, "pnpm" for pnpm
#     pnpm_lock = "//:pnpm-lock.yaml", # Path to your pnpm-lock.yaml
#     # or yarn_lock = "//:yarn.lock", # Path to your yarn.lock
#     # or package_lock_json = "//:package-lock.json", # Path to your package-lock.json
#     verify_node_modules_ignored = "//:.bazelignore",
# )
# use_repo(js_common, "npm") # Or "pnpm", etc.

# TypeScript toolchain (usually comes with aspect_rules_ts and configured via tsconfig)
# ts = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ts")
# ts.toolchain(version = "5.2.2")
# use_repo(ts, "ts_toolchains")
