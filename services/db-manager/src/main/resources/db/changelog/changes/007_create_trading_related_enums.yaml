databaseChangeLog:
  - changeSet:
      id: create_trading_related_enums_007
      author: gemini-idx-assistant
      changes:
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'market_data_type_enum') THEN
                CREATE TYPE market_data_type_enum AS ENUM (
                  'TRADE', 'QUOTE', 'BID', 'ASK', 'MIDPOINT', 'TRADING_SESSION_HIGH_PRICE', 'TRADING_SESSION_LOW_PRICE', 
                  'TRADE_VOLUME', 'OPEN_INTEREST', 'EMPTY_BOOK', 'SECURITY_STATUS', 
                  'OPENING_PRICE', 'CLOSING_PRICE', 'SETTLEMENT_PRICE' 
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_type_enum') THEN
                CREATE TYPE order_type_enum AS ENUM (
                  'MARKET', 'LIMIT', 'STOP', 'STOP_LIMIT', 'MARKET_ON_CLOSE', 'LIMIT_ON_CLOSE', 
                  'PEGGED', 'MARKET_WITH_LEFTOVER_AS_LIMIT', 'PREVIOUSLY_QUOTED', 'PREVIOUSLY_INDICATED',
                  'FOREX_MARKET', 'FOREX_LIMIT', 'FOREX_SWAP', 'FOREX_PREVIOUSLY_QUOTED', 'FUNARI', 
                  'MARKET_IF_TOUCHED', 'MARKET_WITH_LEFTOVER_AS_LIMIT', 'STOP_LOSS_LIMIT' 
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_status_enum') THEN
                CREATE TYPE order_status_enum AS ENUM (
                  'NEW', 'PARTIALLY_FILLED', 'FILLED', 'DONE_FOR_DAY', 'CANCELED', 'REPLACED', 
                  'PENDING_CANCEL', 'STOPPED', 'REJECTED', 'SUSPENDED', 'PENDING_NEW', 'CALCULATED', 
                  'EXPIRED', 'ACCEPTED_FOR_BIDDING', 'PENDING_REPLACE', 'UNKNOWN'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_side_enum') THEN
                CREATE TYPE order_side_enum AS ENUM (
                  'BUY', 'SELL', 'SELL_SHORT', 'SELL_SHORT_EXEMPT', 'BUY_TO_COVER', 
                  'CROSS', 'CROSS_SHORT', 'AS_DEFINED', 'OPPOSITE'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'time_in_force_enum') THEN
                CREATE TYPE time_in_force_enum AS ENUM (
                  'DAY', 'GTC', 'OPG', 'IOC', 'FOK', 'GTX', 'GTD', 'AUC', 'FILL_OR_KILL', 'GOOD_THRU_DATE'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'exec_type_enum') THEN
                CREATE TYPE exec_type_enum AS ENUM (
                  'NEW', 'DONE_FOR_DAY', 'CANCELED', 'REPLACED', 'PENDING_CANCEL', 'STOPPED', 'REJECTED', 
                  'SUSPENDED', 'PENDING_NEW', 'CALCULATED', 'EXPIRED', 'RESTATED', 'PENDING_REPLACE', 
                  'TRADE', 'TRADE_CORRECT', 'TRADE_CANCEL', 'ORDER_STATUS', 'TRADE_IN_A_CLEARING_HOLD'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'trade_report_type_enum') THEN
                CREATE TYPE trade_report_type_enum AS ENUM (
                  'SUBMIT', 'ALLEGED', 'ACCEPT', 'DECLINE', 'ADDENDUM', 'NO_WAS', 'TRADE_REPORT_CANCEL', 
                  'LOCKED_IN', 'DEFAULTED', 'INVALID_CMTA', 'PENDED_VERIFY', 'REJECTED', 
                  'TRADE_BREAK', 'VERIFIED'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'trade_status_internal_enum') THEN
                CREATE TYPE trade_status_internal_enum AS ENUM (
                  'PENDING_VALIDATION', 'PENDING_CLEARING', 'PENDING_SETTLEMENT', 'SETTLED', 'CANCELED', 
                  'ALLOCATED', 'FAILED_SETTLEMENT', 'REJECTED_BY_CLEARING', 'REJECTED_BY_COUNTERPARTY'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'position_type_enum') THEN
                CREATE TYPE position_type_enum AS ENUM (
                  'INTRADAY', 'OVERNIGHT', 'SETTLED', 'PENDING_RECEIPT', 'PENDING_DELIVERY', 
                  'START_OF_DAY', 'END_OF_DAY'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'price_type_enum') THEN
                CREATE TYPE price_type_enum AS ENUM (
                  'PERCENTAGE', 'PER_UNIT', 'FIXED_AMOUNT', 'DISCOUNT', 'PREMIUM', 'SPREAD', 'TED_PRICE', 
                  'TED_YIELD', 'YIELD', 'FIXED_CABINET_TRADE_PRICE', 'VARIABLE_CABINET_TRADE_PRICE'
                ); END IF; END $$;
            dbms: postgresql
            splitStatements: false
