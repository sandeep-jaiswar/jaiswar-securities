databaseChangeLog:
  - changeSet:
      id: create_enum_types_000
      author: gemini-idx-assistant
      changes:
        - sql:
            sql: |
              DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'client_type_enum') THEN
                  CREATE TYPE client_type_enum AS ENUM ('INDIVIDUAL', 'INSTITUTIONAL', 'CORPORATE');
                END IF;
              END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'kyc_status_enum') THEN
                  CREATE TYPE kyc_status_enum AS ENUM ('PENDING', 'VERIFIED', 'REJECTED', 'EXPIRED', 'IN_REVIEW');
                END IF;
              END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'aml_risk_rating_enum') THEN
                  CREATE TYPE aml_risk_rating_enum AS ENUM ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL');
                END IF;
              END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'record_status_enum') THEN
                  CREATE TYPE record_status_enum AS ENUM ('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_ACTIVATION', 'CLOSED', 'ARCHIVED');
                END IF;
              END $$;
            dbms: postgresql
            splitStatements: false
        - sql:
            sql: |
              DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'account_type_enum') THEN
                  CREATE TYPE account_type_enum AS ENUM ('TRADING', 'MARGIN', 'CASH', 'CUSTODIAL', 'SETTLEMENT', 'INTERNAL_HOUSE');
                END IF;
              END $$;
            dbms: postgresql
            splitStatements: false
      # Using raw SQL with DO/END blocks for robust ENUM creation in PostgreSQL
